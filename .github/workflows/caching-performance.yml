name: Caching Performance

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/caching-performance.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_NUMBER: 0

jobs:
  package-caching:
    name: Package Caching Performance (${{ matrix.cache-enabled }})
    runs-on: windows-latest
    outputs:
      without-cache-time: ${{ steps.without-cache-results.outputs.install-time }}
      with-cache-time: ${{ steps.with-cache-results.outputs.install-time }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        cache-enabled: [without-cache, with-cache]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache conda packages
        if: matrix.cache-enabled == 'with-cache'
        uses: actions/cache@v4
        with:
          path: ~/conda_pkgs_dir
          key: windows-cache-test-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            windows-cache-test-${{ env.CACHE_NUMBER }}-

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          pkgs-dirs: ${{ matrix.cache-enabled == 'with-cache' && '~/conda_pkgs_dir' || '' }}
          use-only-tar-bz2: ${{ matrix.cache-enabled == 'with-cache' }}

      - name: Time Package Installation
        run: |
          start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          conda env create -f environment.yml -n cache-perf-test
          end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          duration=$(powershell -Command "($end_time - $start_time) / 10000000")
          formatted_duration=$(powershell -Command "[math]::Round($duration, 1)")
          echo "INSTALL_TIME=${formatted_duration}" >> $GITHUB_ENV

      - name: Set Without Cache Outputs
        if: matrix.cache-enabled == 'without-cache'
        id: without-cache-results
        run: |
          echo "install-time=${INSTALL_TIME}" >> $GITHUB_OUTPUT

      - name: Set With Cache Outputs
        if: matrix.cache-enabled == 'with-cache'
        id: with-cache-results
        run: |
          echo "install-time=${INSTALL_TIME}" >> $GITHUB_OUTPUT

      - name: Report Cache Performance Results
        run: |
          echo "=== CACHE PERFORMANCE RESULTS ==="
          echo "Cache Mode: ${{ matrix.cache-enabled }}"
          echo "Installation Time: ${INSTALL_TIME} seconds"

      - name: Cleanup
        run: conda env remove -n cache-perf-test -y

  environment-caching:
    name: Environment Cache Test (${{ matrix.cache-run }})
    runs-on: windows-latest
    outputs:
      first-run-time: ${{ steps.first-results.outputs.env-time }}
      second-run-time: ${{ steps.second-results.outputs.env-time }}
      first-cache-hit: ${{ steps.first-results.outputs.cache-hit }}
      second-cache-hit: ${{ steps.second-results.outputs.cache-hit }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        cache-run: [first, second]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Date
        id: get-date
        run: echo "today=$(Get-Date -UFormat '+%Y%m%d')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Setup Miniforge (Initial)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest

      - name: Cache Conda environment
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs/test-env
          key: conda-env-windows-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}
          restore-keys: |
            conda-env-windows-${{ hashFiles('environment.yml') }}-
        id: cache

      - name: Time Environment Update (Cache Miss/Hit)
        run: |
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          if [ "${{ steps.cache.outputs.cache-hit }}" != "true" ]; then
            echo "Cache miss - creating environment"
            conda env create -f environment.yml -n test-env
          else
            echo "Cache hit - environment should be ready"
          fi
          end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          duration=$(powershell -Command "($end_time - $start_time) / 10000000")
          formatted_duration=$(powershell -Command "[math]::Round($duration, 1)")
          echo "ENV_CACHE_TIME=${formatted_duration}" >> $GITHUB_ENV

      - name: Set First Run Outputs
        if: matrix.cache-run == 'first'
        id: first-results
        run: |
          echo "env-time=${ENV_CACHE_TIME}" >> $GITHUB_OUTPUT
          echo "cache-hit=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

      - name: Set Second Run Outputs
        if: matrix.cache-run == 'second'
        id: second-results
        run: |
          echo "env-time=${ENV_CACHE_TIME}" >> $GITHUB_OUTPUT
          echo "cache-hit=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

      - name: Report Environment Cache Performance
        run: |
          echo "=== ENVIRONMENT CACHE PERFORMANCE SUMMARY ==="
          echo "OS: Windows"
          echo "Cache Run: ${{ matrix.cache-run }}"
          echo "Cache Hit: ${{ steps.cache.outputs.cache-hit }}"
          echo "Setup Time: ${ENV_CACHE_TIME} seconds"

  drive-optimization:
    name: Drive Optimization (${{ matrix.drive }})
    runs-on: windows-latest
    outputs:
      c-drive-time: ${{ steps.c-drive-results.outputs.drive-time }}
      d-drive-time: ${{ steps.d-drive-results.outputs.drive-time }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        drive: [c-drive, d-drive]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set cache path
        run: |
          if ("${{ matrix.drive }}" -eq "c-drive") {
            echo "CACHE_PATH=C:\conda_pkgs_dir" >> $env:GITHUB_ENV
          } else {
            echo "CACHE_PATH=D:\conda_pkgs_dir" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Cache conda packages
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: ${{ matrix.drive == 'd-drive' }}
          path: ${{ env.CACHE_PATH }}
          key: ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          pkgs-dirs: ${{ env.CACHE_PATH }}
          use-only-tar-bz2: true

      - name: Time Drive Performance
        run: |
          start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          conda env create -f environment.yml -n drive-perf-test
          end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          duration=$(powershell -Command "($end_time - $start_time) / 10000000")
          formatted_duration=$(powershell -Command "[math]::Round($duration, 1)")
          echo "DRIVE_TIME=${formatted_duration}" >> $GITHUB_ENV

      - name: Set C Drive Outputs
        if: matrix.drive == 'c-drive'
        id: c-drive-results
        run: |
          echo "drive-time=${DRIVE_TIME}" >> $GITHUB_OUTPUT

      - name: Set D Drive Outputs
        if: matrix.drive == 'd-drive'
        id: d-drive-results
        run: |
          echo "drive-time=${DRIVE_TIME}" >> $GITHUB_OUTPUT

      - name: Report Drive Optimization Results
        run: |
          echo "=== DRIVE OPTIMIZATION RESULTS ==="
          echo "Drive: ${{ matrix.drive }}"
          echo "Installation Time: ${DRIVE_TIME} seconds"
          echo "Cache Path: ${{ env.CACHE_PATH }}"
          echo "Compare c-drive vs d-drive results to see if D: drive helps"

      - name: Cleanup
        run: conda env remove -n drive-perf-test -y
