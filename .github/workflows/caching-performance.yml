name: Caching Performance

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/caching-performance.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_NUMBER: 1

jobs:
  package-caching:
    name: Package Caching Performance (${{ matrix.cache-enabled }})
    runs-on: windows-latest
    outputs:
      without-cache-time: ${{ steps.without-cache-results.outputs.install-time }}
      with-cache-time: ${{ steps.with-cache-results.outputs.install-time }}
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        cache-enabled: [without-cache, with-cache]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache conda packages
        if: matrix.cache-enabled == 'with-cache'
        uses: actions/cache@v4
        with:
          path: ~/conda_pkgs_dir
          key: windows-cache-test-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            windows-cache-test-${{ env.CACHE_NUMBER }}-

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          pkgs-dirs: ${{ matrix.cache-enabled == 'with-cache' && '~/conda_pkgs_dir' || '' }}
          # use-only-tar-bz2: ${{ matrix.cache-enabled == 'with-cache' }}

      - name: Time Package Installation
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          conda env create -f environment.yml -n cache-perf-test
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "INSTALL_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Set Without Cache Outputs
        if: matrix.cache-enabled == 'without-cache'
        id: without-cache-results
        run: |
          echo "install-time=$env:INSTALL_TIME" >> $env:GITHUB_OUTPUT

      - name: Set With Cache Outputs
        if: matrix.cache-enabled == 'with-cache'
        id: with-cache-results
        run: |
          echo "install-time=$env:INSTALL_TIME" >> $env:GITHUB_OUTPUT

      - name: Report Cache Performance Results
        run: |
          echo "=== CACHE PERFORMANCE RESULTS ==="
          echo "Cache Mode: ${{ matrix.cache-enabled }}"
          echo "Installation Time: $env:INSTALL_TIME seconds"

      - name: Cleanup
        run: conda env remove -n cache-perf-test -y

  environment-caching-first:
    name: Environment Cache - First Run (Cache Miss)
    runs-on: windows-latest
    outputs:
      first-run-time: ${{ steps.timing.outputs.env-time }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Date
        id: get-date
        run: echo "today=$(Get-Date -UFormat '+%Y%m%d')" >> $env:GITHUB_OUTPUT

      - name: Setup Miniconda (with environment)
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: test

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}-${{ github.run_id }}
        id: cache

      - name: Update environment and time it
        id: timing
        run: |
          echo "=== FIRST RUN - SHOULD BE CACHE MISS ==="
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          
          $start_time = [System.DateTime]::Now.Ticks
          conda env update -n test -f environment.yml
          $end_time = [System.DateTime]::Now.Ticks
          
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          
          echo "env-time=$formatted_duration" >> $env:GITHUB_OUTPUT
          echo "First run completed in: $formatted_duration seconds"

      - name: Validate environment
        run: |
          conda activate test
          conda list | Select-Object -First 10

  environment-caching-second:
    name: Environment Cache - Second Run (Cache Hit)
    runs-on: windows-latest
    needs: environment-caching-first
    outputs:
      second-run-time: ${{ steps.timing.outputs.env-time }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Date
        id: get-date
        run: echo "today=$(Get-Date -UFormat '+%Y%m%d')" >> $env:GITHUB_OUTPUT

      - name: Setup Miniconda (with environment)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          activate-environment: test-env

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}-${{ github.run_id }}
        id: cache

      - name: Update environment and time it
        id: timing
        run: |
          echo "=== SECOND RUN - SHOULD BE CACHE HIT ==="
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          
          $start_time = [System.DateTime]::Now.Ticks
          
          if ("${{ steps.cache.outputs.cache-hit }}" -ne "true") {
            echo "Unexpected cache miss - updating environment"
            conda env update -n test -f environment.yml
          } else {
            echo "Cache hit - environment should already exist and be ready"
            # Just verify the environment is working
            conda activate test
            echo "Environment validated from cache"
          }
          
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          
          echo "env-time=$formatted_duration" >> $env:GITHUB_OUTPUT
          echo "Second run completed in: $formatted_duration seconds"

      - name: Validate environment
        run: |
          conda activate test
          conda list | Select-Object -First 10

  environment-caching:
    name: Environment Cache Summary
    runs-on: ubuntu-latest
    needs: [environment-caching-first, environment-caching-second]
    if: always()
    outputs:
      first-run-time: ${{ needs.environment-caching-first.outputs.first-run-time }}
      second-run-time: ${{ needs.environment-caching-second.outputs.second-run-time }}
      first-cache-hit: ${{ needs.environment-caching-first.outputs.cache-hit }}
      second-cache-hit: ${{ needs.environment-caching-second.outputs.cache-hit }}
    steps:
      - name: Environment Cache Results
        run: |
          echo "=== ENVIRONMENT CACHE PERFORMANCE SUMMARY ==="
          echo "First Run: ${{ needs.environment-caching-first.outputs.first-run-time }}s (Cache Hit: ${{ needs.environment-caching-first.outputs.cache-hit }})"
          echo "Second Run: ${{ needs.environment-caching-second.outputs.second-run-time }}s (Cache Hit: ${{ needs.environment-caching-second.outputs.cache-hit }})"
          
          # Calculate improvement
          FIRST_TIME="${{ needs.environment-caching-first.outputs.first-run-time }}"
          SECOND_TIME="${{ needs.environment-caching-second.outputs.second-run-time }}"
          SECOND_CACHE_HIT="${{ needs.environment-caching-second.outputs.cache-hit }}"
          
          if [ "$SECOND_CACHE_HIT" = "true" ] && [ -n "$FIRST_TIME" ] && [ -n "$SECOND_TIME" ]; then
            IMPROVEMENT=$(echo "scale=1; ($FIRST_TIME - $SECOND_TIME) / $FIRST_TIME * 100" | bc -l)
            echo "Performance improvement: ${IMPROVEMENT}% faster with environment caching"
          fi

  drive-optimization:
    name: Drive Optimization (${{ matrix.drive }})
    runs-on: windows-latest
    outputs:
      c-drive-time: ${{ steps.c-drive-results.outputs.drive-time }}
      d-drive-time: ${{ steps.d-drive-results.outputs.drive-time }}
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        drive: [c-drive, d-drive]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set cache path
        run: |
          if ("${{ matrix.drive }}" -eq "c-drive") {
            echo "CACHE_PATH=C:\conda_pkgs_dir" >> $env:GITHUB_ENV
          } else {
            echo "CACHE_PATH=D:\conda_pkgs_dir" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Cache conda packages
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: ${{ matrix.drive == 'd-drive' }}
          path: ${{ env.CACHE_PATH }}
          key: ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          pkgs-dirs: ${{ env.CACHE_PATH }}
          use-only-tar-bz2: true

      - name: Time Drive Performance
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          conda env create -f environment.yml -n drive-perf-test
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "DRIVE_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Set C Drive Outputs
        if: matrix.drive == 'c-drive'
        id: c-drive-results
        run: |
          echo "drive-time=$env:DRIVE_TIME" >> $env:GITHUB_OUTPUT

      - name: Set D Drive Outputs
        if: matrix.drive == 'd-drive'
        id: d-drive-results
        run: |
          echo "drive-time=$env:DRIVE_TIME" >> $env:GITHUB_OUTPUT

      - name: Report Drive Optimization Results
        run: |
          echo "=== DRIVE OPTIMIZATION RESULTS ==="
          echo "Drive: ${{ matrix.drive }}"
          echo "Installation Time: $env:DRIVE_TIME seconds"
          echo "Cache Path: ${{ env.CACHE_PATH }}"
          echo "Compare c-drive vs d-drive results to see if D: drive helps"

      - name: Cleanup
        run: conda env remove -n drive-perf-test -y

  summary-report:
    name: Performance Summary Report
    runs-on: ubuntu-latest
    needs: [package-caching, environment-caching, drive-optimization]
    if: always()
    steps:
      - name: Generate Summary Table
        run: |
          echo "# Caching Performance Summary Report"
          echo ""
          echo "| Test Type | Scenario | Time (seconds) | Cache Hit | Notes |"
          echo "|-----------|----------|----------------|-----------|-------|"
          echo "| Package Caching | Without Cache | ${{ needs.package-caching.outputs.without-cache-time }} | N/A | Baseline installation |"
          echo "| Package Caching | With Cache | ${{ needs.package-caching.outputs.with-cache-time }} | N/A | Cached packages |"
          echo "| Environment Caching | First Run | ${{ needs.environment-caching.outputs.first-run-time }} | ${{ needs.environment-caching.outputs.first-cache-hit }} | Cache miss expected |"
          echo "| Environment Caching | Second Run | ${{ needs.environment-caching.outputs.second-run-time }} | ${{ needs.environment-caching.outputs.second-cache-hit }} | Cache hit expected |"
          echo "| Drive Optimization | C: Drive | ${{ needs.drive-optimization.outputs.c-drive-time }} | N/A | Standard drive |"
          echo "| Drive Optimization | D: Drive | ${{ needs.drive-optimization.outputs.d-drive-time }} | N/A | Alternative drive |"
          echo ""
          echo "## Performance Calculations"
          
          # Package caching improvement
          WITHOUT_CACHE="${{ needs.package-caching.outputs.without-cache-time }}"
          WITH_CACHE="${{ needs.package-caching.outputs.with-cache-time }}"
          
          if [ -n "$WITHOUT_CACHE" ] && [ -n "$WITH_CACHE" ] && [ "$WITHOUT_CACHE" != "0" ]; then
            PACKAGE_IMPROVEMENT=$(echo "scale=1; ($WITHOUT_CACHE - $WITH_CACHE) / $WITHOUT_CACHE * 100" | bc -l)
            echo "- Package caching improvement: ${PACKAGE_IMPROVEMENT}%"
          fi
          
          # Environment caching improvement  
          FIRST_RUN="${{ needs.environment-caching.outputs.first-run-time }}"
          SECOND_RUN="${{ needs.environment-caching.outputs.second-run-time }}"
          SECOND_CACHE_HIT="${{ needs.environment-caching.outputs.second-cache-hit }}"
          
          if [ "$SECOND_CACHE_HIT" = "true" ] && [ -n "$FIRST_RUN" ] && [ -n "$SECOND_RUN" ] && [ "$FIRST_RUN" != "0" ]; then
            ENV_IMPROVEMENT=$(echo "scale=1; ($FIRST_RUN - $SECOND_RUN) / $FIRST_RUN * 100" | bc -l)
            echo "- Environment caching improvement: ${ENV_IMPROVEMENT}%"
          fi
          
          # Drive optimization comparison
          C_DRIVE="${{ needs.drive-optimization.outputs.c-drive-time }}"
          D_DRIVE="${{ needs.drive-optimization.outputs.d-drive-time }}"
          
          if [ -n "$C_DRIVE" ] && [ -n "$D_DRIVE" ] && [ "$C_DRIVE" != "0" ]; then
            DRIVE_IMPROVEMENT=$(echo "scale=1; ($C_DRIVE - $D_DRIVE) / $C_DRIVE * 100" | bc -l)
            if [ $(echo "$DRIVE_IMPROVEMENT > 0" | bc -l) -eq 1 ]; then
              echo "- D: drive is ${DRIVE_IMPROVEMENT}% faster than C: drive"
            else
              DRIVE_SLOWER=$(echo "scale=1; $DRIVE_IMPROVEMENT * -1" | bc -l)
              echo "- D: drive is ${DRIVE_SLOWER}% slower than C: drive"
            fi
          fi
