name: Core Setup Comparison

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/core-setup-comparison.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-comparison:
    name: ${{ matrix.setup-type == 'native-conda' && 'Native Runner Conda' || matrix.setup-type == 'runner-conda' && 'Setup Runner Conda' || 'Latest Miniconda' }} (${{ matrix.shell-type }})
    runs-on: windows-latest
    outputs:
      # Native Runner Conda outputs
      native-conda-bash-setup: ${{ steps.native-conda-bash-results.outputs.setup-time }}
      native-conda-bash-creation: ${{ steps.native-conda-bash-results.outputs.creation-time }}
      native-conda-bash-deletion: ${{ steps.native-conda-bash-results.outputs.deletion-time }}
      native-conda-pwsh-setup: ${{ steps.native-conda-pwsh-results.outputs.setup-time }}
      native-conda-pwsh-creation: ${{ steps.native-conda-pwsh-results.outputs.creation-time }}
      native-conda-pwsh-deletion: ${{ steps.native-conda-pwsh-results.outputs.deletion-time }}
      native-conda-cmd-setup: ${{ steps.native-conda-cmd-results.outputs.setup-time }}
      native-conda-cmd-creation: ${{ steps.native-conda-cmd-results.outputs.creation-time }}
      native-conda-cmd-deletion: ${{ steps.native-conda-cmd-results.outputs.deletion-time }}
      # Setup Runner Conda outputs
      runner-conda-bash-setup: ${{ steps.runner-conda-bash-results.outputs.setup-time }}
      runner-conda-bash-creation: ${{ steps.runner-conda-bash-results.outputs.creation-time }}
      runner-conda-bash-deletion: ${{ steps.runner-conda-bash-results.outputs.deletion-time }}
      runner-conda-pwsh-setup: ${{ steps.runner-conda-pwsh-results.outputs.setup-time }}
      runner-conda-pwsh-creation: ${{ steps.runner-conda-pwsh-results.outputs.creation-time }}
      runner-conda-pwsh-deletion: ${{ steps.runner-conda-pwsh-results.outputs.deletion-time }}
      runner-conda-cmd-setup: ${{ steps.runner-conda-cmd-results.outputs.setup-time }}
      runner-conda-cmd-creation: ${{ steps.runner-conda-cmd-results.outputs.creation-time }}
      runner-conda-cmd-deletion: ${{ steps.runner-conda-cmd-results.outputs.deletion-time }}
      # Latest Miniconda outputs
      latest-miniconda-bash-setup: ${{ steps.latest-miniconda-bash-results.outputs.setup-time }}
      latest-miniconda-bash-creation: ${{ steps.latest-miniconda-bash-results.outputs.creation-time }}
      latest-miniconda-bash-deletion: ${{ steps.latest-miniconda-bash-results.outputs.deletion-time }}
      latest-miniconda-pwsh-setup: ${{ steps.latest-miniconda-pwsh-results.outputs.setup-time }}
      latest-miniconda-pwsh-creation: ${{ steps.latest-miniconda-pwsh-results.outputs.creation-time }}
      latest-miniconda-pwsh-deletion: ${{ steps.latest-miniconda-pwsh-results.outputs.deletion-time }}
      latest-miniconda-cmd-setup: ${{ steps.latest-miniconda-cmd-results.outputs.setup-time }}
      latest-miniconda-cmd-creation: ${{ steps.latest-miniconda-cmd-results.outputs.creation-time }}
      latest-miniconda-cmd-deletion: ${{ steps.latest-miniconda-cmd-results.outputs.deletion-time }}
    strategy:
      fail-fast: false
      matrix:
        setup-type: [ native-conda, runner-conda, latest-miniconda ]
        shell-type: [ bash, pwsh, cmd ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Setup Timing
        shell: pwsh
        run: |
          echo "=== Starting ${{ matrix.setup-type }} setup timing with ${{ matrix.shell-type }} shell ==="
          echo "SETUP_START_TIME=$(powershell -Command "[System.DateTime]::Now.Ticks")" >> $env:GITHUB_ENV

      - name: Setup Native Runner Conda (True Baseline)
        if: matrix.setup-type == 'native-conda'
        shell: pwsh
        run: |
          # Use the pre-installed Conda without setup-miniconda action
          echo "Using native runner Conda at: $env:CONDA"
          echo "Conda version:"
          & "$env:CONDA\Scripts\conda.exe" --version
          echo "Conda info:"
          & "$env:CONDA\Scripts\conda.exe" info
          # Initialize conda for different shells
          & "$env:CONDA\Scripts\conda.exe" init powershell
          & "$env:CONDA\Scripts\conda.exe" init cmd.exe

      - name: Setup Runner Conda (Using setup-miniconda)
        if: matrix.setup-type == 'runner-conda'
        uses: conda-incubator/setup-miniconda@v3

      - name: Setup Latest Miniconda
        if: matrix.setup-type == 'latest-miniconda'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"

      - name: Calculate Setup Time
        shell: pwsh
        run: |
          $end_time = powershell -Command "[System.DateTime]::Now.Ticks"
          $duration = powershell -Command "($end_time - $env:SETUP_START_TIME) / 10000000"
          $formatted_duration = [math]::Round($duration, 1)
          echo "${{ matrix.setup-type }} setup with ${{ matrix.shell-type }} took: $formatted_duration seconds"
          echo "SETUP_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Time Environment Creation (Bash)
        if: matrix.shell-type == 'bash'
        shell: bash -el {0}
        run: |
          start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          if [ "${{ matrix.setup-type }}" = "native-conda" ]; then
            # Initialize conda for bash in native mode
            eval "$($CONDA/Scripts/conda.exe shell.bash hook)"
            conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-bash
          else
            conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-bash
          fi
          end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          duration=$(powershell -Command "($end_time - $start_time) / 10000000")
          formatted_duration=$(powershell -Command "[math]::Round($duration, 1)")
          echo "CREATION_TIME=${formatted_duration}" >> $GITHUB_ENV

      - name: Time Environment Creation (PowerShell)
        if: matrix.shell-type == 'pwsh'
        shell: pwsh
        run: |
          $start_time = powershell -Command "[System.DateTime]::Now.Ticks"
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            # Use native conda directly
            & "$env:CONDA\Scripts\conda.exe" env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-pwsh
          } else {
            conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-pwsh
          }
          $end_time = powershell -Command "[System.DateTime]::Now.Ticks"
          $duration = powershell -Command "($end_time - $start_time) / 10000000"
          $formatted_duration = [math]::Round($duration, 1)
          echo "CREATION_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Time Environment Creation (CMD)
        if: matrix.shell-type == 'cmd'
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            # Use native conda directly
            & "$env:CONDA\Scripts\conda.exe" env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-cmd
          } else {
            conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}-cmd
          }
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "CREATION_TIME=$formatted_duration" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Time Environment Deletion (Bash)
        if: matrix.shell-type == 'bash'
        shell: bash -el {0}
        run: |
          start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          if [ "${{ matrix.setup-type }}" = "native-conda" ]; then
            eval "$($CONDA/Scripts/conda.exe shell.bash hook)"
            conda env remove -n perf-test-${{ matrix.setup-type }}-bash -y
          else
            conda env remove -n perf-test-${{ matrix.setup-type }}-bash -y
          fi
          end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
          duration=$(powershell -Command "($end_time - $start_time) / 10000000")
          formatted_duration=$(powershell -Command "[math]::Round($duration, 1)")
          echo "DELETION_TIME=${formatted_duration}" >> $GITHUB_ENV

      - name: Time Environment Deletion (PowerShell)
        if: matrix.shell-type == 'pwsh'
        shell: pwsh
        run: |
          $start_time = powershell -Command "[System.DateTime]::Now.Ticks"
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            & "$env:CONDA\Scripts\conda.exe" env remove -n perf-test-${{ matrix.setup-type }}-pwsh -y
          } else {
            conda env remove -n perf-test-${{ matrix.setup-type }}-pwsh -y
          }
          $end_time = powershell -Command "[System.DateTime]::Now.Ticks"
          $duration = powershell -Command "($end_time - $start_time) / 10000000"
          $formatted_duration = [math]::Round($duration, 1)
          echo "DELETION_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Time Environment Deletion (CMD)
        if: matrix.shell-type == 'cmd'
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            & "$env:CONDA\Scripts\conda.exe" env remove -n perf-test-${{ matrix.setup-type }}-cmd -y
          } else {
            conda env remove -n perf-test-${{ matrix.setup-type }}-cmd -y
          }
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "DELETION_TIME=$formatted_duration" >> $env:GITHUB_ENV
        shell: pwsh

      # Set outputs for each combination
      - name: Set Native Conda Bash Outputs
        if: matrix.setup-type == 'native-conda' && matrix.shell-type == 'bash'
        id: native-conda-bash-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Native Conda PowerShell Outputs
        if: matrix.setup-type == 'native-conda' && matrix.shell-type == 'pwsh'
        id: native-conda-pwsh-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Native Conda CMD Outputs
        if: matrix.setup-type == 'native-conda' && matrix.shell-type == 'cmd'
        id: native-conda-cmd-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Runner Conda Bash Outputs
        if: matrix.setup-type == 'runner-conda' && matrix.shell-type == 'bash'
        id: runner-conda-bash-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Runner Conda PowerShell Outputs
        if: matrix.setup-type == 'runner-conda' && matrix.shell-type == 'pwsh'
        id: runner-conda-pwsh-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Runner Conda CMD Outputs
        if: matrix.setup-type == 'runner-conda' && matrix.shell-type == 'cmd'
        id: runner-conda-cmd-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Latest Miniconda Bash Outputs
        if: matrix.setup-type == 'latest-miniconda' && matrix.shell-type == 'bash'
        id: latest-miniconda-bash-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Latest Miniconda PowerShell Outputs
        if: matrix.setup-type == 'latest-miniconda' && matrix.shell-type == 'pwsh'
        id: latest-miniconda-pwsh-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Latest Miniconda CMD Outputs
        if: matrix.setup-type == 'latest-miniconda' && matrix.shell-type == 'cmd'
        id: latest-miniconda-cmd-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT

      - name: Report Core Performance Results
        shell: pwsh
        run: |
          echo "=== CORE PERFORMANCE RESULTS ==="
          echo "Setup Type: ${{ matrix.setup-type }}"
          echo "Shell Type: ${{ matrix.shell-type }}"
          echo "Setup Time: $env:SETUP_TIME seconds"
          echo "Creation Time: $env:CREATION_TIME seconds"
          echo "Deletion Time: $env:DELETION_TIME seconds"
          try {
            $total = [double]$env:CREATION_TIME + [double]$env:DELETION_TIME
            $formatted_total = [math]::Round($total, 1)
            echo "Total Time: $formatted_total seconds"
          } catch {
            echo "Total Time: Unable to calculate"
          }
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            echo "Native Conda Info:"
            & "$env:CONDA\Scripts\conda.exe" info
          } else {
            conda info
          }
