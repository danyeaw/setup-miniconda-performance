setup-summary:
  name: Setup Comparison Summary
  runs-on: windows-latest
  needs: [setup-comparison]
  if: always()
  steps:
    - name: Generate Setup Comparison Report
      shell: pwsh
      run: |
        echo "=== SETUP COMPARISON SUMMARY ==="
        echo ""
        echo "| Setup Type | Setup Time | Creation Time | Deletion Time | Total Time |"
        echo "|------------|------------|---------------|---------------|------------|"
        echo "| **Native Runner Conda (Baseline)** | ${{ needs.setup-comparison.outputs.native-conda-setup }}s | ${{ needs.setup-comparison.outputs.native-conda-creation }}s | ${{ needs.setup-comparison.outputs.native-conda-deletion }}s | **${{ needs.setup-comparison.outputs.native-conda-total }}s** |"
        echo "| Setup Runner Conda | ${{ needs.setup-comparison.outputs.runner-conda-setup }}s | ${{ needs.setup-comparison.outputs.runner-conda-creation }}s | ${{ needs.setup-comparison.outputs.runner-conda-deletion }}s | ${{ needs.setup-comparison.outputs.runner-conda-total }}s |"
        echo "| Latest Miniconda | ${{ needs.setup-comparison.outputs.latest-miniconda-setup }}s | ${{ needs.setup-comparison.outputs.latest-miniconda-creation }}s | ${{ needs.setup-comparison.outputs.latest-miniconda-deletion }}s | ${{ needs.setup-comparison.outputs.latest-miniconda-total }}s |"
        echo ""
        
        # Calculate setup-miniconda overhead
        $native_total = if ('${{ needs.setup-comparison.outputs.native-conda-total }}' -ne '') { [double]'${{ needs.setup-comparison.outputs.native-conda-total }}' } else { 0 }
        $runner_total = if ('${{ needs.setup-comparison.outputs.runner-conda-total }}' -ne '') { [double]'${{ needs.setup-comparison.outputs.runner-conda-total }}' } else { 0 }
        $latest_total = if ('${{ needs.setup-comparison.outputs.latest-miniconda-total }}' -ne '') { [double]'${{ needs.setup-comparison.outputs.latest-miniconda-total }}' } else { 0 }
        
        if ($native_total -gt 0 -and $runner_total -gt 0) {
          $overhead = [math]::Round(($runner_total - $native_total), 1)
          $ratio = [math]::Round(($runner_total / $native_total), 1)
          echo "**Setup-Miniconda Action Overhead**: +${overhead}s (${ratio}x slower than native)"
        }
        
        if ($native_total -gt 0 -and $latest_total -gt 0) {
          $latest_overhead = [math]::Round(($latest_total - $native_total), 1)
          $latest_ratio = [math]::Round(($latest_total / $native_total), 1)
          echo "**Latest Miniconda Overhead**: +${latest_overhead}s (${latest_ratio}x slower than native)"
        }
        
        echo ""
        echo "**Key Insights**:"
        echo "- Native conda (pre-installed on runner) provides baseline performance"
        echo "- setup-miniconda action adds initialization overhead even with same conda version"
        echo "- Latest miniconda download and installation adds significant time"
        echo "- All tests use bash shell for consistent comparison"name: Core Setup Comparison

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/core-setup-comparison.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-comparison:
    name: Setup Comparison (${{ matrix.setup-type }})
    runs-on: windows-latest
    outputs:
      native-conda-setup: ${{ steps.native-conda-results.outputs.setup-time }}
      native-conda-creation: ${{ steps.native-conda-results.outputs.creation-time }}
      native-conda-deletion: ${{ steps.native-conda-results.outputs.deletion-time }}
      native-conda-total: ${{ steps.native-conda-results.outputs.total-time }}
      runner-conda-setup: ${{ steps.runner-conda-results.outputs.setup-time }}
      runner-conda-creation: ${{ steps.runner-conda-results.outputs.creation-time }}
      runner-conda-deletion: ${{ steps.runner-conda-results.outputs.deletion-time }}
      runner-conda-total: ${{ steps.runner-conda-results.outputs.total-time }}
      latest-miniconda-setup: ${{ steps.latest-miniconda-results.outputs.setup-time }}
      latest-miniconda-creation: ${{ steps.latest-miniconda-results.outputs.creation-time }}
      latest-miniconda-deletion: ${{ steps.latest-miniconda-results.outputs.deletion-time }}
      latest-miniconda-total: ${{ steps.latest-miniconda-results.outputs.total-time }}
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        setup-type: [ native-conda, runner-conda, latest-miniconda ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Setup Timing
        shell: pwsh
        run: |
          echo "=== Starting ${{ matrix.setup-type }} setup timing ==="
          echo "SETUP_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Native Runner Conda (True Baseline)
        if: matrix.setup-type == 'native-conda'
        shell: pwsh
        run: |
          # Use the pre-installed Conda without setup-miniconda action
          echo "Using native runner Conda at: $env:CONDA"
          echo "Conda version:"
          & "$env:CONDA\Scripts\conda.exe" --version
          echo "Conda info:"
          & "$env:CONDA\Scripts\conda.exe" info
          # Initialize conda for PowerShell
          & "$env:CONDA\Scripts\conda.exe" init powershell

      - name: Setup Runner Conda (Using setup-miniconda)
        if: matrix.setup-type == 'runner-conda'
        uses: conda-incubator/setup-miniconda@v3

      - name: Setup Latest Miniconda
        if: matrix.setup-type == 'latest-miniconda'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"

      - name: Calculate Setup Time
        shell: pwsh
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:SETUP_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "${{ matrix.setup-type }} setup took: $formatted_duration seconds"
          echo "SETUP_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Time Environment Creation
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            # Use native conda directly
            & "$env:CONDA\Scripts\conda.exe" env create -f environment.yml -n perf-test-${{ matrix.setup-type }}
          } else {
            conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}
          }
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "CREATION_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Time Environment Deletion
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            & "$env:CONDA\Scripts\conda.exe" env remove -n perf-test-${{ matrix.setup-type }} -y
          } else {
            conda env remove -n perf-test-${{ matrix.setup-type }} -y
          }
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "DELETION_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Calculate Total Time
        shell: pwsh
        run: |
          try {
            $total = [double]$env:SETUP_TIME + [double]$env:CREATION_TIME + [double]$env:DELETION_TIME
            $formatted_total = [math]::Round($total, 1)
            echo "TOTAL_TIME=$formatted_total" >> $env:GITHUB_ENV
          } catch {
            echo "TOTAL_TIME=0" >> $env:GITHUB_ENV
          }

      # Set outputs for each setup type
      - name: Set Native Conda Results
        if: matrix.setup-type == 'native-conda'
        id: native-conda-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Runner Conda Results
        if: matrix.setup-type == 'runner-conda'
        id: runner-conda-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT

      - name: Set Latest Miniconda Results
        if: matrix.setup-type == 'latest-miniconda'
        id: latest-miniconda-results
        shell: pwsh
        run: |
          echo "setup-time=$env:SETUP_TIME" >> $env:GITHUB_OUTPUT
          echo "creation-time=$env:CREATION_TIME" >> $env:GITHUB_OUTPUT
          echo "deletion-time=$env:DELETION_TIME" >> $env:GITHUB_OUTPUT
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT

      - name: Report Core Performance Results
        shell: pwsh
        run: |
          echo "=== CORE PERFORMANCE RESULTS ==="
          echo "Setup Type: ${{ matrix.setup-type }}"
          echo "Setup Time: $env:SETUP_TIME seconds"
          echo "Creation Time: $env:CREATION_TIME seconds"
          echo "Deletion Time: $env:DELETION_TIME seconds"
          echo "Total Time: $env:TOTAL_TIME seconds"
          echo ""
          echo "This test compares different conda setup approaches using PowerShell"
          if ("${{ matrix.setup-type }}" -eq "native-conda") {
            echo "Native Conda Info:"
            & "$env:CONDA\Scripts\conda.exe" info
          } else {
            conda info
          }
