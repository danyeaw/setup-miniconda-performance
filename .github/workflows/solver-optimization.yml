name: Solver Optimization
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/solver-optimization.yml' ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  solver-performance:
    name: Solver Performance (${{ matrix.solver }})
    runs-on: windows-latest
    outputs:
      default-solver-time: ${{ steps.default-results.outputs.solver-time }}
      mamba-solver-time: ${{ steps.mamba-results.outputs.solver-time }}
      mamba-v1-solver-time: ${{ steps.mamba-v1-results.outputs.solver-time }}
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        solver: [default, mamba, mamba-v1]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Miniconda - Default Solver
        if: matrix.solver == 'default'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
      - name: Setup Miniconda - Mamba
        if: matrix.solver == 'mamba'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          mamba-version: "*"
          channels: conda-forge,defaults
      - name: Setup Miniforge - Mamba v1
        if: matrix.solver == 'mamba-v1'
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "24.11.3-2"  # For Mamba 1.5.12
          auto-update-conda: false
          use-mamba: true
          channels: conda-forge,defaults
      - name: Time Solver Performance
        run: |
          $start_time = [System.DateTime]::Now.Ticks
          if ("${{ matrix.solver }}" -eq "mamba" -or "${{ matrix.solver }}" -eq "mamba-v1") {
            mamba env create -f environment.yml -n solver-perf-test
          } else {
            conda env create -f environment.yml -n solver-perf-test
          }
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $start_time) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "SOLVER_TIME=$formatted_duration" >> $env:GITHUB_ENV
      - name: Set Default Solver Outputs
        if: matrix.solver == 'default'
        id: default-results
        run: |
          echo "solver-time=$env:SOLVER_TIME" >> $env:GITHUB_OUTPUT
      - name: Set Mamba Solver Outputs
        if: matrix.solver == 'mamba'
        id: mamba-results
        run: |
          echo "solver-time=$env:SOLVER_TIME" >> $env:GITHUB_OUTPUT
      - name: Set Mamba v1 Solver Outputs
        if: matrix.solver == 'mamba-v1'
        id: mamba-v1-results
        run: |
          echo "solver-time=$env:SOLVER_TIME" >> $env:GITHUB_OUTPUT
      - name: Report Solver Optimization Results
        run: |
          echo "=== SOLVER OPTIMIZATION RESULTS ==="
          echo "Solver: ${{ matrix.solver }}"
          echo "Installation Time: $env:SOLVER_TIME seconds"
          echo "Compare with 'default' results to see if optimization helps"
      - name: Cleanup
        run: |
          if ("${{ matrix.solver }}" -eq "mamba" -or "${{ matrix.solver }}" -eq "mamba-v1") {
            mamba env remove -n solver-perf-test -y
          } else {
            conda env remove -n solver-perf-test -y
          }

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: solver-performance
    if: always()
    steps:
      - name: Create Performance Summary
        run: |
          echo "# 🚀 Solver Performance Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Solver | Time (seconds) | Performance vs Default |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------------|------------------------|" >> $GITHUB_STEP_SUMMARY
          
          # Get the times (handle potential empty values)
          DEFAULT_TIME="${{ needs.solver-performance.outputs.default-solver-time }}"
          MAMBA_TIME="${{ needs.solver-performance.outputs.mamba-solver-time }}"
          MAMBA_V1_TIME="${{ needs.solver-performance.outputs.mamba-v1-solver-time }}"
          
          # Default solver row
          if [ -n "$DEFAULT_TIME" ]; then
            echo "| Default | ${DEFAULT_TIME}s | Baseline |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Default | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Mamba solver row
          if [ -n "$MAMBA_TIME" ] && [ -n "$DEFAULT_TIME" ]; then
            IMPROVEMENT=$(echo "scale=1; ($DEFAULT_TIME - $MAMBA_TIME) / $DEFAULT_TIME * 100" | bc -l)
            if (( $(echo "$MAMBA_TIME < $DEFAULT_TIME" | bc -l) )); then
              echo "| Mamba | ${MAMBA_TIME}s | 🟢 ${IMPROVEMENT}% faster |" >> $GITHUB_STEP_SUMMARY
            else
              SLOWER=$(echo "scale=1; ($MAMBA_TIME - $DEFAULT_TIME) / $DEFAULT_TIME * 100" | bc -l)
              echo "| Mamba | ${MAMBA_TIME}s | 🔴 ${SLOWER}% slower |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ -n "$MAMBA_TIME" ]; then
            echo "| Mamba | ${MAMBA_TIME}s | ⚠️ No baseline |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Mamba | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Mamba v1 solver row
          if [ -n "$MAMBA_V1_TIME" ] && [ -n "$DEFAULT_TIME" ]; then
            IMPROVEMENT=$(echo "scale=1; ($DEFAULT_TIME - $MAMBA_V1_TIME) / $DEFAULT_TIME * 100" | bc -l)
            if (( $(echo "$MAMBA_V1_TIME < $DEFAULT_TIME" | bc -l) )); then
              echo "| Mamba v1 | ${MAMBA_V1_TIME}s | 🟢 ${IMPROVEMENT}% faster |" >> $GITHUB_STEP_SUMMARY
            else
              SLOWER=$(echo "scale=1; ($MAMBA_V1_TIME - $DEFAULT_TIME) / $DEFAULT_TIME * 100" | bc -l)
              echo "| Mamba v1 | ${MAMBA_V1_TIME}s | 🔴 ${SLOWER}% slower |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ -n "$MAMBA_V1_TIME" ]; then
            echo "| Mamba v1 | ${MAMBA_V1_TIME}s | ⚠️ No baseline |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Mamba v1 | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine and display recommendation
          if [ -n "$DEFAULT_TIME" ] && [ -n "$MAMBA_TIME" ] && [ -n "$MAMBA_V1_TIME" ]; then
            # Find the fastest solver
            FASTEST="default"
            FASTEST_TIME=$DEFAULT_TIME
          
            if (( $(echo "$MAMBA_TIME < $FASTEST_TIME" | bc -l) )); then
              FASTEST="mamba"
              FASTEST_TIME=$MAMBA_TIME
            fi
          
            if (( $(echo "$MAMBA_V1_TIME < $FASTEST_TIME" | bc -l) )); then
              FASTEST="mamba-v1"
              FASTEST_TIME=$MAMBA_V1_TIME
            fi
          
            echo "## 🏆 Recommendation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            case $FASTEST in
              "default")
                echo "**Stick with the default conda solver** - it performed best for your environment." >> $GITHUB_STEP_SUMMARY
                ;;
              "mamba")
                echo "**Switch to Mamba** - it's the fastest option for your environment setup!" >> $GITHUB_STEP_SUMMARY
                ;;
              "mamba-v1")
                echo "**Consider Mamba v1** - it's the fastest option, though you may want to evaluate if the newer Mamba has additional benefits." >> $GITHUB_STEP_SUMMARY
                ;;
            esac
          else
            echo "## ⚠️ Incomplete Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some solver tests failed. Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Output Raw Results for Logging
        run: |
          echo "=== RAW PERFORMANCE RESULTS ==="
          echo "Default Solver: ${{ needs.solver-performance.outputs.default-solver-time }}s"
          echo "Mamba Solver: ${{ needs.solver-performance.outputs.mamba-solver-time }}s"  
          echo "Mamba v1 Solver: ${{ needs.solver-performance.outputs.mamba-v1-solver-time }}s"
