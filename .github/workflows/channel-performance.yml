name: Channel Performance Analysis

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/channel-performance.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  full-channels:
    name: Full Channels Test
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      total-time: ${{ steps.results.outputs.total-time }}
      packages-found: ${{ steps.results.outputs.packages-found }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Timing
        run: |
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge,defaults

      - name: Create Environment
        run: |
          conda env create -f environment.yml -n test-env

      - name: Stop Timing
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "PERFORMANCE_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Count Packages
        run: |
          $package_count = 0
          try {
            $search_result = conda search 2>&1
            if ($LASTEXITCODE -eq 0) {
              $package_count = ($search_result | Where-Object { $_ -match "^\w+\s+" } | Measure-Object).Count
            }
          } catch {
            $package_count = 0
          }
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV

      - name: Output Results
        id: results
        run: |
          echo "Full channels: ${env:PERFORMANCE_TIME}s, ${env:PACKAGES_FOUND} packages"
          echo "total-time=${env:PERFORMANCE_TIME}" >> $env:GITHUB_OUTPUT
          echo "packages-found=${env:PACKAGES_FOUND}" >> $env:GITHUB_OUTPUT

  defaults-only:
    name: Defaults Only Test
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      total-time: ${{ steps.results.outputs.total-time }}
      packages-found: ${{ steps.results.outputs.packages-found }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Timing
        run: |
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: defaults

      - name: Create Environment
        run: |
          conda env create -f environment-defaults.yml -n test-env

      - name: Stop Timing
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "PERFORMANCE_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Count Packages
        run: |
          $package_count = 0
          try {
            $search_result = conda search -c defaults --override-channels 2>&1
            if ($LASTEXITCODE -eq 0) {
              $package_count = ($search_result | Where-Object { $_ -match "^\w+\s+" } | Measure-Object).Count
            }
          } catch {
            $package_count = 0
          }
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV

      - name: Output Results
        id: results
        run: |
          echo "Defaults only: ${env:PERFORMANCE_TIME}s, ${env:PACKAGES_FOUND} packages"
          echo "total-time=${env:PERFORMANCE_TIME}" >> $env:GITHUB_OUTPUT
          echo "packages-found=${env:PACKAGES_FOUND}" >> $env:GITHUB_OUTPUT

  custom-channel:
    name: Custom Channel Test
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      total-time: ${{ steps.results.outputs.total-time }}
      packages-found: ${{ steps.results.outputs.packages-found }}
      success: ${{ steps.results.outputs.success }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Timing
        run: |
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channel-priority: strict
          channels: danyeaw/label/danyeaw

      - name: Create Environment
        id: env-create
        run: |
          conda env create -f environment-small-channel.yml -n test-env

      - name: Stop Timing
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "PERFORMANCE_TIME=$formatted_duration" >> $env:GITHUB_ENV

      - name: Count Packages
        run: |
          $package_count = 0
          try {
            $search_result = conda search -c danyeaw/label/danyeaw --override-channels 2>&1
            if ($LASTEXITCODE -eq 0) {
              $package_count = ($search_result | Where-Object { $_ -match "^\w+\s+" } | Measure-Object).Count
            }
          } catch {
            $package_count = 0
          }
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV

      - name: Output Results
        id: results
        run: |
          $success = if ('${{ steps.env-create.outcome }}' -eq 'success') { 'true' } else { 'false' }
          
          echo "Custom channel: ${env:PERFORMANCE_TIME}s, ${env:PACKAGES_FOUND} packages, Success: $success"
          echo "total-time=${env:PERFORMANCE_TIME}" >> $env:GITHUB_OUTPUT
          echo "packages-found=${env:PACKAGES_FOUND}" >> $env:GITHUB_OUTPUT
          echo "success=$success" >> $env:GITHUB_OUTPUT

  results:
    name: Compare Results
    runs-on: windows-latest
    needs: [full-channels, defaults-only, custom-channel]
    if: always()
    steps:
      - name: Generate Report
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "Channel Performance Results"
          Write-Host "=========================="
          Write-Host ""
          Write-Host "| Channel        | Time (s) | Packages | Status    |"
          Write-Host "|----------------|----------|----------|-----------|"
          Write-Host "| Full Channels  | ${{ needs.full-channels.outputs.total-time }}      | ${{ needs.full-channels.outputs.packages-found }}     | Success   |"
          Write-Host "| Defaults Only  | ${{ needs.defaults-only.outputs.total-time }}      | ${{ needs.defaults-only.outputs.packages-found }}     | Success   |"
          
          $custom_status = if ('${{ needs.custom-channel.outputs.success }}' -eq 'true') { "Success" } else { "Failed" }
          Write-Host "| Custom Channel | ${{ needs.custom-channel.outputs.total-time }}      | ${{ needs.custom-channel.outputs.packages-found }}     | $custom_status    |"
          Write-Host ""
