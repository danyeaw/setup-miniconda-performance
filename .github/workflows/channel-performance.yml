name: Channel Performance

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/channel-performance.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  default-channels:
    name: Default Channels (conda-forge + defaults)
    runs-on: windows-latest
    timeout-minutes: 25
    outputs:
      total-time: ${{ steps.default-results.outputs.total-time }}
      packages-found: ${{ steps.default-results.outputs.packages-found }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Total Timing
        run: |
          echo "=== Testing default channels performance ==="
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda with Default Channels
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          channels: conda-forge,defaults
          auto-activate-base: false

      - name: Create Environment with Default Channels
        timeout-minutes: 20
        run: |
          echo "Creating environment using default channels..."
          conda info
          conda env create -f environment.yml -n default-channels-test --verbose

      - name: Count Available Packages
        run: |
          echo "Searching available packages..."
          # FIXED: Use text parsing instead of broken JSON parsing
          $search_output = conda search 2>&1 | Where-Object { 
            $_ -match "^\w+\s+" -and 
            $_ -notmatch "^(Loading|Collecting|#|Name\s+Version|$)" 
          }
          $package_count = ($search_output | Measure-Object).Count
          
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV
          echo "Available packages in default channels: $package_count"
          
          # Debug: show first few package names
          echo "Sample packages found:"
          $search_output | Select-Object -First 5 | ForEach-Object { echo "  $_" }

      - name: Calculate Total Time
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "TOTAL_TIME=$formatted_duration" >> $env:GITHUB_ENV
          echo "Default channels total time: $formatted_duration seconds"

      - name: Set Results
        id: default-results
        run: |
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT
          echo "packages-found=$env:PACKAGES_FOUND" >> $env:GITHUB_OUTPUT

      - name: Report Results
        run: |
          echo "=== DEFAULT CHANNELS RESULTS ==="
          echo "Channels: conda-forge, defaults"
          echo "Total Time: $env:TOTAL_TIME seconds"
          echo "Available Packages: $env:PACKAGES_FOUND"
          echo "This represents performance with full conda-forge + defaults catalog"

      - name: Cleanup
        run: |
          conda env remove -n default-channels-test -y 2>$null

  custom-channel-only:
    name: Custom Channel Only (danyeaw)
    runs-on: windows-latest
    timeout-minutes: 25
    outputs:
      total-time: ${{ steps.custom-results.outputs.total-time }}
      packages-found: ${{ steps.custom-results.outputs.packages-found }}
      success: ${{ steps.custom-results.outputs.success }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Total Timing
        run: |
          echo "=== Testing custom channel only performance ==="
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda with Custom Channel Only
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          channels: danyeaw
          auto-activate-base: false

      - name: Configure Strict Channel Usage
        run: |
          echo "Configuring conda to ONLY use custom channel..."
          
          # Remove all default channels
          conda config --remove channels defaults 2>$null || echo "defaults not in config"
          conda config --remove channels conda-forge 2>$null || echo "conda-forge not in config"
          
          # Set ONLY our custom channel
          conda config --set channels danyeaw
          
          # Disable channel priority (use only specified channels)
          conda config --set channel_priority disabled
          
          # Show final configuration
          echo "Final channel configuration:"
          conda config --show channels
          
          echo "Channel priority setting:"
          conda config --show channel_priority

      - name: Verify Channel Isolation
        run: |
          echo "=== Verifying channel isolation ==="
          echo "Configured channels:"
          conda config --get channels
          
          echo ""
          echo "Testing search with explicit channel:"
          $explicit_search = conda search -c danyeaw --override-channels 2>&1 | Where-Object { $_ -match "^\w+\s+" -and $_ -notmatch "^(Loading|Collecting|#|Name\s+Version)" }
          $explicit_count = ($explicit_search | Measure-Object).Count
          echo "Explicit channel search found: $explicit_count packages"
          
          echo ""
          echo "Testing default search (should be same as explicit):"
          $default_search = conda search 2>&1 | Where-Object { $_ -match "^\w+\s+" -and $_ -notmatch "^(Loading|Collecting|#|Name\s+Version)" }
          $default_count = ($default_search | Measure-Object).Count
          echo "Default search found: $default_count packages"
          
          if ($explicit_count -eq $default_count) {
            echo "✅ Channel isolation successful - both searches return same count"
          } else {
            echo "❌ Channel isolation failed - default search accessing other channels"
            echo "This means conda is still using fallback channels"
          }

      - name: Create Environment with Custom Channel Only
        continue-on-error: true
        timeout-minutes: 15
        id: custom-env-create
        run: |
          echo "Creating environment using ONLY custom channel..."
          conda info
          
          echo "Attempting environment creation with --override-channels..."
          conda env create -f environment-small-channel.yml -n custom-channel-test --verbose

      - name: Count Available Packages
        run: |
          echo "Searching available packages in danyeaw channel only..."
          
          # Force search to ONLY use the specified channel
          $search_output = conda search -c danyeaw --override-channels 2>&1 | Where-Object { 
            $_ -match "^\w+\s+" -and 
            $_ -notmatch "^(Loading|Collecting|#|Name\s+Version|$)" 
          }
          $package_count = ($search_output | Measure-Object).Count
          
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV
          echo "Available packages in danyeaw channel: $package_count"
          
          # Debug: show first few package names
          echo "Sample packages found:"
          $search_output | Select-Object -First 10 | ForEach-Object { echo "  $_" }
          
          # Verify this matches expected count
          if ($package_count -eq 50) {
            echo "✅ Package count matches expected (50 packages)"
          } else {
            echo "⚠️ Package count ($package_count) doesn't match expected (50)"
            echo "This might indicate search issues or channel configuration problems"
          }

      - name: Calculate Total Time
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "TOTAL_TIME=$formatted_duration" >> $env:GITHUB_ENV
          echo "Custom channel only total time: $formatted_duration seconds"

      - name: Set Results
        id: custom-results
        run: |
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT
          echo "packages-found=$env:PACKAGES_FOUND" >> $env:GITHUB_OUTPUT
          $success = if ('${{ steps.custom-env-create.outcome }}' -eq 'success') { 'true' } else { 'false' }
          echo "success=$success" >> $env:GITHUB_OUTPUT

      - name: Report Results
        run: |
          echo "=== CUSTOM CHANNEL ONLY RESULTS ==="
          echo "Channels: danyeaw (strict mode)"
          echo "Total Time: $env:TOTAL_TIME seconds"
          echo "Available Packages: $env:PACKAGES_FOUND"
          echo "Environment Creation: ${{ steps.custom-env-create.outcome }}"
          if ('${{ steps.custom-env-create.outcome }}' -eq 'success') {
            echo "✅ Successfully created environment from custom channel only"
          } else {
            echo "❌ Could not create environment (packages may not be available in custom channel)"
          }

      - name: Cleanup
        run: |
          conda env remove -n custom-channel-test -y 2>$null

  defaults-only:
    name: Defaults Only (defaults channel)
    runs-on: windows-latest
    timeout-minutes: 25
    outputs:
      total-time: ${{ steps.defaults-results.outputs.total-time }}
      packages-found: ${{ steps.defaults-results.outputs.packages-found }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Total Timing
        run: |
          echo "=== Testing defaults channel only performance ==="
          echo "TOTAL_START_TIME=$([System.DateTime]::Now.Ticks)" >> $env:GITHUB_ENV

      - name: Setup Miniconda with Defaults Only
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          channels: defaults
          auto-activate-base: false

      - name: Debug Environment
        run: |
          echo "=== Environment Debug Info ==="
          echo "Conda version: $(conda --version)"
          echo "Available channels:"
          conda config --show channels
          echo "=========================="

      - name: Create Environment with Defaults Only
        timeout-minutes: 15
        run: |
          echo "Creating environment using defaults channel only..."
          conda info
          conda env create -f environment-defaults.yml -n defaults-only-test --verbose

      - name: Count Available Packages
        run: |
          echo "Searching available packages in defaults channel..."
          # FIXED: Use text parsing instead of broken JSON parsing
          $search_output = conda search 2>&1 | Where-Object { 
            $_ -match "^\w+\s+" -and 
            $_ -notmatch "^(Loading|Collecting|#|Name\s+Version|$)" 
          }
          $package_count = ($search_output | Measure-Object).Count
          
          echo "PACKAGES_FOUND=$package_count" >> $env:GITHUB_ENV
          echo "Available packages in defaults channel: $package_count"
          
          # Debug: show first few package names
          echo "Sample packages found:"
          $search_output | Select-Object -First 5 | ForEach-Object { echo "  $_" }

      - name: Calculate Total Time
        run: |
          $end_time = [System.DateTime]::Now.Ticks
          $duration = ($end_time - $env:TOTAL_START_TIME) / 10000000
          $formatted_duration = [math]::Round($duration, 1)
          echo "TOTAL_TIME=$formatted_duration" >> $env:GITHUB_ENV
          echo "Defaults only total time: $formatted_duration seconds"

      - name: Set Results
        id: defaults-results
        run: |
          echo "total-time=$env:TOTAL_TIME" >> $env:GITHUB_OUTPUT
          echo "packages-found=$env:PACKAGES_FOUND" >> $env:GITHUB_OUTPUT

      - name: Report Results
        run: |
          echo "=== DEFAULTS ONLY RESULTS ==="
          echo "Channels: defaults"
          echo "Total Time: $env:TOTAL_TIME seconds"
          echo "Available Packages: $env:PACKAGES_FOUND"
          echo "This represents performance with Anaconda's curated defaults channel only"

      - name: Cleanup
        run: |
          conda env remove -n defaults-only-test -y 2>$null

  channel-summary:
    name: Channel Performance Summary
    runs-on: windows-latest
    needs: [default-channels, defaults-only, custom-channel-only]
    if: always()
    steps:
      - name: Generate Channel Performance Report
        shell: pwsh
        run: |
          echo "=== CHANNEL PERFORMANCE SUMMARY ==="
          echo ""
          echo "Channel size impact on conda performance analysis"
          echo ""
          echo "| Channel Configuration | Total Time | Packages Available | Environment Creation |"
          echo "|-----------------------|------------|-------------------|---------------------|"
          echo "| conda-forge + defaults (Largest) | ${{ needs.default-channels.outputs.total-time }}s | ${{ needs.default-channels.outputs.packages-found }} | ✅ Success |"
          echo "| defaults only (Medium) | ${{ needs.defaults-only.outputs.total-time }}s | ${{ needs.defaults-only.outputs.packages-found }} | ✅ Success |"
          
          $custom_success = if ('${{ needs.custom-channel-only.outputs.success }}' -eq 'true') { '✅ Success' } else { '❌ Failed' }
          echo "| danyeaw custom (Smallest) | ${{ needs.custom-channel-only.outputs.total-time }}s | ${{ needs.custom-channel-only.outputs.packages-found }} | $custom_success |"
          echo ""
          
          # Performance analysis with better error handling
          $default_time = 0
          $defaults_only_time = 0  
          $custom_time = 0
          $default_packages = 0
          $defaults_only_packages = 0
          $custom_packages = 0
          
          # Safely parse numeric values
          try {
            if ('${{ needs.default-channels.outputs.total-time }}' -match '^\d+\.?\d*$') {
              $default_time = [double]'${{ needs.default-channels.outputs.total-time }}'
            }
          } catch { echo "Could not parse default-channels time" }
          
          try {
            if ('${{ needs.defaults-only.outputs.total-time }}' -match '^\d+\.?\d*$') {
              $defaults_only_time = [double]'${{ needs.defaults-only.outputs.total-time }}'
            }
          } catch { echo "Could not parse defaults-only time" }
          
          try {
            if ('${{ needs.custom-channel-only.outputs.total-time }}' -match '^\d+\.?\d*$') {
              $custom_time = [double]'${{ needs.custom-channel-only.outputs.total-time }}'
            }
          } catch { echo "Could not parse custom channel time" }
          
          # Safely parse package counts
          try {
            if ('${{ needs.default-channels.outputs.packages-found }}' -match '^\d+$') {
              $default_packages = [int]'${{ needs.default-channels.outputs.packages-found }}'
            }
          } catch { echo "Could not parse default-channels package count" }
          
          try {
            if ('${{ needs.defaults-only.outputs.packages-found }}' -match '^\d+$') {
              $defaults_only_packages = [int]'${{ needs.defaults-only.outputs.packages-found }}'
            }
          } catch { echo "Could not parse defaults-only package count" }
          
          try {
            if ('${{ needs.custom-channel-only.outputs.packages-found }}' -match '^\d+$') {
              $custom_packages = [int]'${{ needs.custom-channel-only.outputs.packages-found }}'
            }
          } catch { echo "Could not parse custom channel package count" }
          
          # Display parsed values for debugging
          echo "Parsed values:"
          echo "- Default time: $default_time, packages: $default_packages"
          echo "- Defaults-only time: $defaults_only_time, packages: $defaults_only_packages" 
          echo "- Custom time: $custom_time, packages: $custom_packages"
          echo ""
          
          # Performance analysis
          echo "## Channel Size vs Performance Analysis"
          echo ""
          
          if ($defaults_only_time -gt 0 -and $default_time -gt 0) {
            if ($defaults_only_time -lt $default_time) {
              $speedup = [math]::Round(($default_time / $defaults_only_time), 1)
              echo "🚀 **defaults only advantage**: ${speedup}x faster than conda-forge+defaults (saves $([math]::Round(($default_time - $defaults_only_time), 1))s)"
            } else {
              $slowdown = [math]::Round(($defaults_only_time / $default_time), 1)
              echo "⚠️ **conda-forge advantage**: ${slowdown}x faster than defaults only (saves $([math]::Round(($defaults_only_time - $default_time), 1))s)"
            }
          }
          
          if ($custom_time -gt 0 -and '${{ needs.custom-channel-only.outputs.success }}' -eq 'true') {
            if ($custom_time -lt $defaults_only_time) {
              $speedup = [math]::Round(($defaults_only_time / $custom_time), 1)
              echo "🎯 **Custom channel advantage**: ${speedup}x faster than defaults only (saves $([math]::Round(($defaults_only_time - $custom_time), 1))s)"
            } else {
              $slowdown = [math]::Round(($custom_time / $defaults_only_time), 1)
              echo "⚠️ **Custom channel overhead**: ${slowdown}x slower than defaults only (+$([math]::Round(($custom_time - $defaults_only_time), 1))s)"
            }
          
            if ($custom_time -lt $default_time) {
              $speedup = [math]::Round(($default_time / $custom_time), 1)
              echo "🚀 **Custom vs full channels**: ${speedup}x faster than conda-forge+defaults (saves $([math]::Round(($default_time - $custom_time), 1))s)"
            }
          } else {
            echo "❌ **Custom channel**: Could not complete environment creation (packages not available)"
          }
          
          echo ""
          echo "## Channel Size Impact Analysis"
          echo ""
          echo "| Channel | Package Count | Resolution Time | Time/1000 Packages |"
          echo "|---------|---------------|-----------------|-------------------|"
          
          if ($default_packages -gt 0) {
            $default_time_per_1k = [math]::Round(($default_time * 1000 / $default_packages), 2)
            echo "| **conda-forge + defaults** | $default_packages | $([math]::Round($default_time, 1))s | ${default_time_per_1k}s |"
          }
          
          if ($defaults_only_packages -gt 0) {
            $defaults_time_per_1k = [math]::Round(($defaults_only_time * 1000 / $defaults_only_packages), 2)
            echo "| **defaults only** | $defaults_only_packages | $([math]::Round($defaults_only_time, 1))s | ${defaults_time_per_1k}s |"
          }
          
          if ($custom_packages -gt 0) {
            $custom_time_per_1k = [math]::Round(($custom_time * 1000 / $custom_packages), 2)
            echo "| **danyeaw custom** | $custom_packages | $([math]::Round($custom_time, 1))s | ${custom_time_per_1k}s |"
          } else {
            echo "| **danyeaw custom** | 0 | $([math]::Round($custom_time, 1))s | N/A |"
          }
          
          echo ""
          echo "## Key Insights"
          echo ""
          echo "### Channel Size Theory Validation"
          echo "- **Hypothesis**: Smaller channels should resolve dependencies faster"
          echo "- **Package counts**: conda-forge+defaults (~500k+) > defaults (~8k) > custom (~50)"
          echo "- **Resolution time**: Should decrease as package count decreases"
          echo ""
          
          if ($custom_packages -eq 0) {
            echo "### Custom Channel Status"
            echo "- ❌ **No packages found** in anaconda.org/danyeaw channel with strict isolation"
            echo "- 📦 **Channel isolation working** - no fallback to other channels"
            echo "- 🔧 **Required packages** from environment.yml missing from custom channel"
            echo "- 📋 **Verify channel** at: https://anaconda.org/danyeaw"
            echo ""
          } elseif ($custom_packages -lt 50) {
            echo "### Custom Channel Status"
            echo "- ⚠️ **Fewer packages found ($custom_packages) than expected (50)**"
            echo "- 🔍 **Channel isolation** may be working, but search filtering could be affecting results"
            echo "- 📦 **Verify actual package count** at: https://anaconda.org/danyeaw"
            echo ""
          } else {
            echo "### Custom Channel Performance Results"
            echo "- ✅ **$custom_packages packages** available in custom channel"
            if ($custom_time -lt $default_time) {
              $speedup = [math]::Round(($default_time / $custom_time), 1)
              echo "- 🚀 **${speedup}x faster** than full conda-forge+defaults"
              echo "- 💡 **Theory confirmed**: Smaller channels improve resolution speed"
            }
            if ($custom_time -lt $defaults_only_time) {
              $speedup = [math]::Round(($defaults_only_time / $custom_time), 1)
              echo "- 🎯 **${speedup}x faster** than defaults only"
            }
            echo ""
          }
          
          echo "### Performance Recommendations"
          echo ""
          if ($defaults_only_time -lt $default_time) {
            echo "- 🎯 **Use defaults only** instead of conda-forge+defaults for faster resolution"
            echo "- 📦 **Validate package availability** in defaults channel before switching"
          }
          
          if ($custom_packages -gt 0 -and '${{ needs.custom-channel-only.outputs.success }}' -eq 'true') {
            echo "- 🚀 **Custom channel provides significant speedup** - consider for production"
            echo "- 📦 **Maintain minimal custom channel** with only essential packages"
            echo "- 🔄 **Use custom channel as primary** with fallback channels if needed"
          } else {
            echo "- 📦 **Ensure environment.yml dependencies exist in custom channel**"
            echo "- 🧪 **Re-run test** after ensuring all required packages are available"
          }
          
          echo "- 📊 **Monitor channel size vs performance trade-offs** regularly"
          echo "- 🎛️ **Choose channel strategy** based on speed vs package availability needs"
          echo ""
          echo "### Channel Isolation Verification"
          echo "- ✅ **Strict channel mode implemented** for custom channel testing"
          echo "- 🔒 **--override-channels flag** prevents fallback to other channels"
          echo "- 📈 **True performance comparison** now possible between channel sizes"
