name: Main Performance Test

on:
  workflow_dispatch:
    inputs:
      test-suite:
        description: 'Which test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - core-setup-comparison
          - environment-operations
          - caching-performance
          - solver-optimization
          - lockfile-performance
          - shell-performance
      generate-summary:
        description: 'Generate summary report after tests'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths: [ '.github/workflows/main-performance-test.yml' ]

permissions:
  actions: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trigger-tests:
    name: Trigger Performance Tests
    runs-on: ubuntu-latest
    outputs:
      triggered-workflows: ${{ steps.trigger.outputs.workflows }}
    steps:
      - name: Trigger Selected Tests
        id: trigger
        uses: actions/github-script@v7
        with:
          script: |
            const testSuite = '${{ github.event.inputs.test-suite }}' || 'all';
            
            const workflows = {
              'core-setup-comparison': 'core-setup-comparison.yml',
              'environment-operations': 'environment-operations.yml', 
              'caching-performance': 'caching-performance.yml',
              'solver-optimization': 'solver-optimization.yml',
              'lockfile-performance': 'lockfile-performance.yml',
              'shell-performance': 'shell-performance.yml'
            };
            
            const triggeredWorkflows = [];
            
            if (testSuite === 'all') {
              // Trigger all workflows
              for (const [name, workflowFile] of Object.entries(workflows)) {
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowFile,
                  ref: 'main'
                });
                triggeredWorkflows.push(name);
                console.log(`✅ Triggered ${name}`);
            
                // Add delay between triggers to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
            } else if (workflows[testSuite]) {
              // Trigger specific workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflows[testSuite],
                ref: 'main'
              });
              triggeredWorkflows.push(testSuite);
              console.log(`✅ Triggered ${testSuite}`);
            } else {
              console.log(`❌ Unknown test suite: ${testSuite}`);
            }
            
            core.setOutput('workflows', JSON.stringify(triggeredWorkflows));
            return triggeredWorkflows;

      - name: Display Triggered Tests
        run: |
          echo "=== TRIGGERED PERFORMANCE TESTS ==="
          echo "Test Suite: ${{ github.event.inputs.test-suite || 'all' }}"
          echo "Triggered Workflows: ${{ steps.trigger.outputs.workflows }}"
          echo ""
          echo "You can monitor the progress of these tests in the Actions tab:"
          echo "https://github.com/${{ github.repository }}/actions"

  wait-and-summarize:
    name: Wait for Tests and Generate Summary
    runs-on: ubuntu-latest
    needs: [trigger-tests]
    if: ${{ github.event.inputs.generate-summary != 'false' }}
    steps:
      - name: Wait for Tests to Complete
        run: |
          echo "Waiting for triggered tests to complete..."
          echo "This will wait up to 15 minutes for all tests to finish"
          
          # Wait 15 minutes for tests to complete
          echo "Waiting 15 minutes..."
          sleep 900

      - name: Check Test Status
        id: check-status
        uses: actions/github-script@v7
        with:
          script: |
            const triggeredWorkflows = JSON.parse('${{ needs.trigger-tests.outputs.triggered-workflows }}');
            
            const workflowFiles = {
              'core-setup-comparison': 'core-setup-comparison.yml',
              'environment-operations': 'environment-operations.yml', 
              'caching-performance': 'caching-performance.yml',
              'solver-optimization': 'solver-optimization.yml',
              'lockfile-performance': 'lockfile-performance.yml',
              'shell-performance': 'shell-performance.yml'
            };
            
            const results = {};
            let allCompleted = true;
            
            for (const workflowName of triggeredWorkflows) {
              const workflowFile = workflowFiles[workflowName];
              if (!workflowFile) continue;
            
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFile,
                per_page: 5
              });
            
              // Find the most recent run that started after this workflow
              const recentRun = runs.data.workflow_runs.find(run => 
                new Date(run.created_at) > new Date('${{ github.event.head_commit.timestamp || github.run_started_at }}')
              );
            
              if (recentRun) {
                results[workflowName] = {
                  status: recentRun.status,
                  conclusion: recentRun.conclusion,
                  html_url: recentRun.html_url,
                  created_at: recentRun.created_at
                };
            
                if (recentRun.status !== 'completed') {
                  allCompleted = false;
                }
              } else {
                results[workflowName] = { status: 'not_started' };
                allCompleted = false;
              }
            }
            
            core.setOutput('results', JSON.stringify(results));
            core.setOutput('all_completed', allCompleted);
            
            return results;

      - name: Generate Quick Summary
        env:
          TEST_RESULTS: ${{ steps.check-status.outputs.results }}
        run: |
          echo "=== PERFORMANCE TEST SUMMARY ===" 
          echo ""
          echo "**Triggered at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "**Test Suite:** ${{ github.event.inputs.test-suite || 'all' }}"
          echo ""
          echo "## Test Status"
          echo ""
          
          # Parse and display results
          echo '${{ steps.check-status.outputs.results }}' | jq -r '
            to_entries[] |
            "- **" + .key + "**: " + 
            (if .value.status == "completed" then 
              (.value.conclusion // "unknown")
            else 
              (.value.status // "unknown")
            end) +
            (if .value.html_url then " ([View](" + .value.html_url + "))" else "" end)
          '
          
          echo ""
          if [ "${{ steps.check-status.outputs.all_completed }}" = "true" ]; then
            echo "✅ All tests completed!"
            echo ""
            echo "For detailed performance analysis, check the individual workflow results above,"
            echo "or run the 'Performance Summary' workflow to generate a comprehensive report."
          else
            echo "⏳ Some tests are still running or haven't started yet."
            echo ""
            echo "Check the Actions tab for real-time status:"
            echo "https://github.com/${{ github.repository }}/actions"
          fi

      - name: Trigger Summary Report
        if: steps.check-status.outputs.all_completed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Wait a bit more to ensure all artifacts are ready
            await new Promise(resolve => setTimeout(resolve, 60000));
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'performance-summary.yml',
              ref: 'main'
            });
            console.log('✅ Triggered Performance Summary workflow');
