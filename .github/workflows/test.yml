name: Setup Miniconda Performance Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/test.yml' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_NUMBER: 0

jobs:
  bundled-vs-latest:
    name: ${{ matrix.setup-type == 'runner-conda' && 'Runner Conda' || 'Latest Miniconda' }}
    runs-on: windows-latest
    outputs:
      runner-conda-creation: ${{ steps.runner-conda-results.outputs.creation-time }}
      runner-conda-deletion: ${{ steps.runner-conda-results.outputs.deletion-time }}
      latest-miniconda-creation: ${{ steps.latest-miniconda-results.outputs.creation-time }}
      latest-miniconda-deletion: ${{ steps.latest-miniconda-results.outputs.deletion-time }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        setup-type: [runner-conda, latest-miniconda]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Runner Conda (Baseline)
      if: matrix.setup-type == 'runner-conda'
      uses: conda-incubator/setup-miniconda@v3

    - name: Setup Latest Miniconda
      if: matrix.setup-type == 'latest-miniconda'
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"

    - name: Time Environment Creation
      run: |
        echo "=== Testing ${{ matrix.setup-type }} setup performance ==="
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        conda env create -f environment.yml -n perf-test-${{ matrix.setup-type }}
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Environment creation took: ${duration} seconds"
        echo "CREATION_TIME=${duration}" >> $GITHUB_ENV

    - name: Test Environment Works
      run: |
        conda activate perf-test-${{ matrix.setup-type }}
        python -c "import numpy, pandas, requests, pytest; print('Environment working correctly')"
        conda list

    - name: Time Environment Deletion
      run: |
        echo "=== Testing environment deletion ==="
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        conda env remove -n perf-test-${{ matrix.setup-type }} -y
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Environment deletion took: ${duration} seconds"
        echo "DELETION_TIME=${duration}" >> $GITHUB_ENV

    - name: Set Runner Conda Outputs
      if: matrix.setup-type == 'runner-conda'
      id: runner-conda-results
      run: |
        echo "creation-time=${CREATION_TIME}" >> $GITHUB_OUTPUT
        echo "deletion-time=${DELETION_TIME}" >> $GITHUB_OUTPUT

    - name: Set Latest Miniconda Outputs
      if: matrix.setup-type == 'latest-miniconda'
      id: latest-miniconda-results
      run: |
        echo "creation-time=${CREATION_TIME}" >> $GITHUB_OUTPUT
        echo "deletion-time=${DELETION_TIME}" >> $GITHUB_OUTPUT

    - name: Report Core Performance Results
      run: |
        echo "=== CORE PERFORMANCE RESULTS ==="
        echo "Setup Type: ${{ matrix.setup-type }}"
        echo "Creation Time: ${CREATION_TIME} seconds"
        echo "Deletion Time: ${DELETION_TIME} seconds"
        echo "Total Time: $(powershell -Command "${CREATION_TIME} + ${DELETION_TIME}") seconds"
        conda info

  caching-performance:
    name: Caching Performance (${{ matrix.cache-enabled }})
    runs-on: windows-latest
    outputs:
      without-cache-time: ${{ steps.without-cache-results.outputs.install-time }}
      with-cache-time: ${{ steps.with-cache-results.outputs.install-time }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        cache-enabled: [without-cache, with-cache]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache conda packages
      if: matrix.cache-enabled == 'with-cache'
      uses: actions/cache@v4
      with:
        path: ~/conda_pkgs_dir
        key: windows-cache-test-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
        restore-keys: |
          windows-cache-test-${{ env.CACHE_NUMBER }}-

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        pkgs-dirs: ${{ matrix.cache-enabled == 'with-cache' && '~/conda_pkgs_dir' || '' }}
        use-only-tar-bz2: ${{ matrix.cache-enabled == 'with-cache' }}

    - name: Time Package Installation
      run: |
        echo "=== Testing installation ${{ matrix.cache-enabled }} ==="
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        conda env create -f environment.yml -n cache-perf-test
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Package installation took: ${duration} seconds"
        echo "INSTALL_TIME=${duration}" >> $GITHUB_ENV

    - name: Verify Installation
      run: |
        conda activate cache-perf-test
        python -c "import numpy, pandas, requests, pytest; print('All packages working')"

    - name: Set Without Cache Outputs
      if: matrix.cache-enabled == 'without-cache'
      id: without-cache-results
      run: |
        echo "install-time=${INSTALL_TIME}" >> $GITHUB_OUTPUT

    - name: Set With Cache Outputs
      if: matrix.cache-enabled == 'with-cache'
      id: with-cache-results
      run: |
        echo "install-time=${INSTALL_TIME}" >> $GITHUB_OUTPUT

    - name: Report Cache Performance Results
      run: |
        echo "=== CACHE PERFORMANCE RESULTS ==="
        echo "Cache Mode: ${{ matrix.cache-enabled }}"
        echo "Installation Time: ${INSTALL_TIME} seconds"

    - name: Cleanup
      run: conda env remove -n cache-perf-test -y

  solver-optimization-proof:
    name: Solver Optimization (${{ matrix.solver }})
    runs-on: windows-latest
    outputs:
      default-solver-time: ${{ steps.default-results.outputs.solver-time }}
      libmamba-solver-time: ${{ steps.libmamba-results.outputs.solver-time }}
      mamba-solver-time: ${{ steps.mamba-results.outputs.solver-time }}
    needs: bundled-vs-latest
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        solver: [default, libmamba, mamba]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Miniconda - Default Solver
      if: matrix.solver == 'default'
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"

    - name: Setup Miniconda - Libmamba Solver
      if: matrix.solver == 'libmamba'
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        conda-solver: libmamba

    - name: Setup Miniconda - Mamba
      if: matrix.solver == 'mamba'
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        mamba-version: "*"
        channels: conda-forge,defaults

    - name: Time Solver Performance
      run: |
        echo "=== Testing ${{ matrix.solver }} solver performance ==="
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        if [ "${{ matrix.solver }}" = "mamba" ]; then
          mamba env create -f environment.yml -n solver-perf-test
        else
          conda env create -f environment.yml -n solver-perf-test
        fi
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Solver installation took: ${duration} seconds"
        echo "SOLVER_TIME=${duration}" >> $GITHUB_ENV

    - name: Set Default Solver Outputs
      if: matrix.solver == 'default'
      id: default-results
      run: |
        echo "solver-time=${SOLVER_TIME}" >> $GITHUB_OUTPUT

    - name: Set Libmamba Solver Outputs
      if: matrix.solver == 'libmamba'
      id: libmamba-results
      run: |
        echo "solver-time=${SOLVER_TIME}" >> $GITHUB_OUTPUT

    - name: Set Mamba Solver Outputs
      if: matrix.solver == 'mamba'
      id: mamba-results
      run: |
        echo "solver-time=${SOLVER_TIME}" >> $GITHUB_OUTPUT

    - name: Report Solver Optimization Results
      run: |
        echo "=== SOLVER OPTIMIZATION RESULTS ==="
        echo "Solver: ${{ matrix.solver }}"
        echo "Installation Time: ${SOLVER_TIME} seconds"
        echo "Compare with 'default' results to see if optimization helps"

    - name: Cleanup
      run: |
        if [ "${{ matrix.solver }}" = "mamba" ]; then
          mamba env remove -n solver-perf-test -y
        else
          conda env remove -n solver-perf-test -y
        fi

  drive-optimization-proof:
    name: Drive Optimization (${{ matrix.drive }})
    runs-on: windows-latest
    outputs:
      c-drive-time: ${{ steps.c-drive-results.outputs.drive-time }}
      d-drive-time: ${{ steps.d-drive-results.outputs.drive-time }}
    needs: caching-performance
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        drive: [c-drive, d-drive]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set cache path
      run: |
        if ("${{ matrix.drive }}" -eq "c-drive") {
          echo "CACHE_PATH=C:\conda_pkgs_dir" >> $env:GITHUB_ENV
        } else {
          echo "CACHE_PATH=D:\conda_pkgs_dir" >> $env:GITHUB_ENV
        }
      shell: pwsh

    - name: Cache conda packages
      uses: actions/cache@v4
      with:
        enableCrossOsArchive: ${{ matrix.drive == 'd-drive' }}
        path: ${{ env.CACHE_PATH }}
        key: ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ matrix.drive }}-cache-${{ env.CACHE_NUMBER }}-

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        pkgs-dirs: ${{ env.CACHE_PATH }}
        use-only-tar-bz2: true

    - name: Time Drive Performance
      run: |
        echo "=== Testing ${{ matrix.drive }} performance ==="
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        conda env create -f environment.yml -n drive-perf-test
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Drive installation took: ${duration} seconds"
        echo "DRIVE_TIME=${duration}" >> $GITHUB_ENV

    - name: Set C Drive Outputs
      if: matrix.drive == 'c-drive'
      id: c-drive-results
      run: |
        echo "drive-time=${DRIVE_TIME}" >> $GITHUB_OUTPUT

    - name: Set D Drive Outputs
      if: matrix.drive == 'd-drive'
      id: d-drive-results
      run: |
        echo "drive-time=${DRIVE_TIME}" >> $GITHUB_OUTPUT

    - name: Report Drive Optimization Results
      run: |
        echo "=== DRIVE OPTIMIZATION RESULTS ==="
        echo "Drive: ${{ matrix.drive }}"
        echo "Installation Time: ${DRIVE_TIME} seconds"
        echo "Cache Path: ${{ env.CACHE_PATH }}"
        echo "Compare c-drive vs d-drive results to see if D: drive helps"

    - name: Cleanup
      run: conda env remove -n drive-perf-test -y

  environment-caching:
    name: Environment Cache Test (${{ matrix.cache-run }})
    runs-on: windows-latest
    outputs:
      first-run-time: ${{ steps.first-results.outputs.env-time }}
      second-run-time: ${{ steps.second-results.outputs.env-time }}
      first-cache-hit: ${{ steps.first-results.outputs.cache-hit }}
      second-cache-hit: ${{ steps.second-results.outputs.cache-hit }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        cache-run: [first, second]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get Date
      id: get-date
      run: echo "today=$(Get-Date -UFormat '+%Y%m%d')" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Setup Miniforge (Initial)
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Cache Conda environment
      uses: actions/cache@v4
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-windows--x64--${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}-${{ matrix.cache-run }}
        restore-keys: |
          conda-windows--x64--${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}-
      id: cache

    - name: Time Environment Update (Cache Miss/Hit)
      run: |
        echo "=== Testing environment caching (${{ matrix.cache-run }} run) ==="
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        
        start_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        
        if [ "${{ steps.cache.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss - creating environment"
          conda env create -f environment.yml -n test-env
        else
          echo "Cache hit - environment should be ready"
        fi
        
        end_time=$(powershell -Command "[System.DateTime]::Now.Ticks")
        duration=$(powershell -Command "($end_time - $start_time) / 10000000")
        echo "Environment setup took: ${duration} seconds"
        echo "ENV_CACHE_TIME=${duration}" >> $GITHUB_ENV

    - name: Set First Run Outputs
      if: matrix.cache-run == 'first'
      id: first-results
      run: |
        echo "env-time=${ENV_CACHE_TIME}" >> $GITHUB_OUTPUT
        echo "cache-hit=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

    - name: Set Second Run Outputs
      if: matrix.cache-run == 'second'
      id: second-results
      run: |
        echo "env-time=${ENV_CACHE_TIME}" >> $GITHUB_OUTPUT
        echo "cache-hit=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT

    - name: Test cached environment
      run: |
        conda activate test-env
        python -c "import numpy, pandas, requests, pytest; print('Cached environment working correctly')"

    - name: Report Environment Cache Performance
      run: |
        echo "=== ENVIRONMENT CACHE PERFORMANCE SUMMARY ==="
        echo "OS: Windows"
        echo "Cache Run: ${{ matrix.cache-run }}"
        echo "Cache Hit: ${{ steps.cache.outputs.cache-hit }}"
        echo "Setup Time: ${ENV_CACHE_TIME} seconds"

  performance-summary:
    name: Performance Summary
    runs-on: windows-latest
    needs: [bundled-vs-latest, caching-performance, solver-optimization-proof, drive-optimization-proof, environment-caching]
    if: always()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Performance Report
      run: |
        echo "# Miniconda Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "**Test Date:** $(Get-Date -UFormat '%Y-%m-%d %H:%M:%S UTC')" >> performance-report.md
        echo "**OS:** Windows" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Runner vs Latest Miniconda" >> performance-report.md
        echo "| Setup Type | Creation Time | Deletion Time | Total Time |" >> performance-report.md
        echo "|------------|---------------|---------------|------------|" >> performance-report.md
        echo "| Runner Conda | ${{ needs.bundled-vs-latest.outputs.runner-conda-creation }}s | ${{ needs.bundled-vs-latest.outputs.runner-conda-deletion }}s | $(powershell -Command "${{ needs.bundled-vs-latest.outputs.runner-conda-creation }} + ${{ needs.bundled-vs-latest.outputs.runner-conda-deletion }}")s |" >> performance-report.md
        echo "| Latest Miniconda | ${{ needs.bundled-vs-latest.outputs.latest-miniconda-creation }}s | ${{ needs.bundled-vs-latest.outputs.latest-miniconda-deletion }}s | $(powershell -Command "${{ needs.bundled-vs-latest.outputs.latest-miniconda-creation }} + ${{ needs.bundled-vs-latest.outputs.latest-miniconda-deletion }}")s |" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Package Caching Impact" >> performance-report.md
        echo "| Cache Mode | Installation Time | Speedup |" >> performance-report.md
        echo "|------------|-------------------|---------|" >> performance-report.md
        echo "| Without Cache | ${{ needs.caching-performance.outputs.without-cache-time }}s | - |" >> performance-report.md
        echo "| With Cache | ${{ needs.caching-performance.outputs.with-cache-time }}s | $(powershell -Command "if (${{ needs.caching-performance.outputs.without-cache-time }} -gt 0) { [math]::Round((${{ needs.caching-performance.outputs.without-cache-time }} / ${{ needs.caching-performance.outputs.with-cache-time }}), 2) } else { 'N/A' }")x |" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Solver Performance" >> performance-report.md
        echo "| Solver | Installation Time | vs Default |" >> performance-report.md
        echo "|--------|-------------------|------------|" >> performance-report.md
        echo "| Default | ${{ needs.solver-optimization-proof.outputs.default-solver-time }}s | - |" >> performance-report.md
        echo "| Libmamba | ${{ needs.solver-optimization-proof.outputs.libmamba-solver-time }}s | $(powershell -Command "if (${{ needs.solver-optimization-proof.outputs.default-solver-time }} -gt 0) { [math]::Round((${{ needs.solver-optimization-proof.outputs.default-solver-time }} / ${{ needs.solver-optimization-proof.outputs.libmamba-solver-time }}), 2) } else { 'N/A' }")x |" >> performance-report.md
        echo "| Mamba | ${{ needs.solver-optimization-proof.outputs.mamba-solver-time }}s | $(powershell -Command "if (${{ needs.solver-optimization-proof.outputs.default-solver-time }} -gt 0) { [math]::Round((${{ needs.solver-optimization-proof.outputs.default-solver-time }} / ${{ needs.solver-optimization-proof.outputs.mamba-solver-time }}), 2) } else { 'N/A' }")x |" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Drive Performance" >> performance-report.md
        echo "| Drive | Installation Time | vs C: Drive |" >> performance-report.md
        echo "|-------|-------------------|-------------|" >> performance-report.md
        echo "| C: Drive | ${{ needs.drive-optimization-proof.outputs.c-drive-time }}s | - |" >> performance-report.md
        echo "| D: Drive | ${{ needs.drive-optimization-proof.outputs.d-drive-time }}s | $(powershell -Command "if (${{ needs.drive-optimization-proof.outputs.c-drive-time }} -gt 0) { [math]::Round((${{ needs.drive-optimization-proof.outputs.c-drive-time }} / ${{ needs.drive-optimization-proof.outputs.d-drive-time }}), 2) } else { 'N/A' }")x |" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Environment Caching" >> performance-report.md
        echo "| Run | Cache Hit | Setup Time | Speedup |" >> performance-report.md
        echo "|-----|-----------|------------|---------|" >> performance-report.md
        echo "| First | ${{ needs.environment-caching.outputs.first-cache-hit }} | ${{ needs.environment-caching.outputs.first-run-time }}s | - |" >> performance-report.md
        echo "| Second | ${{ needs.environment-caching.outputs.second-cache-hit }} | ${{ needs.environment-caching.outputs.second-run-time }}s | $(powershell -Command "if (${{ needs.environment-caching.outputs.first-run-time }} -gt 0) { [math]::Round((${{ needs.environment-caching.outputs.first-run-time }} / ${{ needs.environment-caching.outputs.second-run-time }}), 2) } else { 'N/A' }")x |" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Summary" >> performance-report.md
        echo "- **Fastest Base Setup:** $(powershell -Command "if (${{ needs.bundled-vs-latest.outputs.runner-conda-creation }} -lt ${{ needs.bundled-vs-latest.outputs.latest-miniconda-creation }}) { 'Runner Conda' } else { 'Latest Miniconda' }")" >> performance-report.md
        echo "- **Cache Benefit:** $(powershell -Command "if (${{ needs.caching-performance.outputs.without-cache-time }} -gt 0) { [math]::Round(((${{ needs.caching-performance.outputs.without-cache-time }} - ${{ needs.caching-performance.outputs.with-cache-time }}) / ${{ needs.caching-performance.outputs.without-cache-time }} * 100), 1) } else { 0 }")% faster" >> performance-report.md
        echo "- **Best Solver:** $(powershell -Command "$times = @(${{ needs.solver-optimization-proof.outputs.default-solver-time }}, ${{ needs.solver-optimization-proof.outputs.libmamba-solver-time }}, ${{ needs.solver-optimization-proof.outputs.mamba-solver-time }}); $solvers = @('Default', 'Libmamba', 'Mamba'); $min = ($times | Measure-Object -Minimum).Minimum; $index = [array]::IndexOf($times, $min); $solvers[$index]")" >> performance-report.md
        echo "- **Drive Impact:** $(powershell -Command "if (${{ needs.drive-optimization-proof.outputs.c-drive-time }} -lt ${{ needs.drive-optimization-proof.outputs.d-drive-time }}) { 'C: drive faster' } else { 'D: drive faster' }")" >> performance-report.md
      shell: pwsh

    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md

    - name: Display Results Summary
      run: |
        echo "=== PERFORMANCE RESULTS ==="
        echo "Runner Conda: ${{ needs.bundled-vs-latest.outputs.runner-conda-creation }}s creation"
        echo "Latest Miniconda: ${{ needs.bundled-vs-latest.outputs.latest-miniconda-creation }}s creation"
        echo "Without Cache: ${{ needs.caching-performance.outputs.without-cache-time }}s"
        echo "With Cache: ${{ needs.caching-performance.outputs.with-cache-time }}s"
        echo "Default Solver: ${{ needs.solver-optimization-proof.outputs.default-solver-time }}s"
        echo "Libmamba Solver: ${{ needs.solver-optimization-proof.outputs.libmamba-solver-time }}s"
        echo "Mamba Solver: ${{ needs.solver-optimization-proof.outputs.mamba-solver-time }}s"
        echo "C: Drive: ${{ needs.drive-optimization-proof.outputs.c-drive-time }}s"
        echo "D: Drive: ${{ needs.drive-optimization-proof.outputs.d-drive-time }}s"
        echo "Env Cache First: ${{ needs.environment-caching.outputs.first-run-time }}s"
        echo "Env Cache Second: ${{ needs.environment-caching.outputs.second-run-time }}s"
      shell: pwsh

